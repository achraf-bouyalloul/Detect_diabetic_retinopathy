# -*- coding: utf-8 -*-
"""comparsion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A--CAEVjaJf_VvMEofDVEj_RB9KOIY7H
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import csv
from sklearn.metrics import cohen_kappa_score

# Chemin vers les fichiers CSV de prédiction et de vérité terrain
prediction_file = 'chemin-fichier-csv' # chosi chemin de fichier csv de prediction
ground_truth_file = 'chemin-fichier_csv' # chosi chemin de fichier csv  

# Charger les prédictions à partir du fichier CSV
predictions = {}
with open(prediction_file, 'r') as file:
    reader = csv.reader(file)
    next(reader)  # Skip header row
    for row in reader:
        image_name = os.path.splitext(row[0])[0].upper()  # Supprimer l'extension ".PNG" du nom d'image
        predicted_class = int(row[1])  # Convertir l'indice de la classe prédite en entier
        predictions[image_name] = predicted_class

# Charger les vraies étiquettes à partir du fichier CSV de vérité terrain
ground_truth = {}
with open(ground_truth_file, 'r') as file:
    reader = csv.reader(file)
    next(reader)  # Skip header row
    for row in reader:
        image_name = row[0].upper()  # Convertir le nom d'image en majuscules
        true_class = int(row[1])  # Convertir l'étiquette en entier (assumer que les étiquettes sont dans la deuxième colonne)
        ground_truth[image_name] = true_class

# Vérifier les images communes entre les fichiers de prédiction et de vérité terrain
common_images = set(predictions.keys()) & set(ground_truth.keys())

# Filtrer les prédictions en fonction des images communes
filtered_predictions = [predictions[image_name] for image_name in common_images]
filtered_ground_truth = [ground_truth[image_name] for image_name in common_images]

# Calculer le coefficient kappa
kappa_score = cohen_kappa_score(filtered_ground_truth, filtered_predictions)

# Afficher le coefficient kappa
print("Coefficient Kappa :", kappa_score)