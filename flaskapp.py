# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p1Pkme3cnnCHi_IuL06VB8_v3nPvrNEb
"""

!pip install flask flask-ngrok numpy keras tensorflow pillow matplotlib

!pip install pyngrok

from pyngrok import ngrok

from flask import Flask, render_template, request, jsonify
from flask_ngrok import run_with_ngrok
import numpy as np
from keras.applications import DenseNet121
from keras.applications.densenet import preprocess_input as densenet_preprocess_input
from tensorflow.keras.applications import EfficientNetB0
from tensorflow.keras.applications.efficientnet import preprocess_input as efficientnet_preprocess_input
from tensorflow.keras.layers import GlobalAveragePooling2D, Dense
from tensorflow.keras.models import Model
from PIL import Image
import io
import os
import csv
import numpy as np
from keras.applications.densenet import preprocess_input
from keras.preprocessing import image
from tensorflow.keras.applications import EfficientNetB0
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from PIL import Image
import os
import matplotlib.pyplot as plt
from keras.applications import DenseNet121
from keras.models import Model
from keras.layers import Dense, GlobalAveragePooling2D
from keras.optimizers import Adam
from tensorflow.keras.applications.efficientnet import preprocess_input
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image

app = Flask(__name__, template_folder='/content/drive/MyDrive/Colab Notebooks/stage 1a/')
run_with_ngrok(app)


# Load models with architectures and weights
def load_dense_model(chemin):
    input_shape = (224, 224, 3)
    base_model_dense = DenseNet121(weights=None, include_top=False, input_shape=input_shape)
    x = base_model_dense.output
    x = GlobalAveragePooling2D()(x)
    x = Dense(512, activation='relu')(x)
    predictions_dense = Dense(5, activation='softmax')(x)
    model_dense = Model(inputs=base_model_dense.input, outputs=predictions_dense)
    model_dense.compile(optimizer=Adam(lr=0.001), loss='categorical_crossentropy', metrics=['accuracy'])
    model_dense.load_weights(chemin)
    return model_dense

def load_eff_model(chemin):
   num_classes = 2
   input_shape = (224, 224, 3)

  # Chargement du modèle EfficientNetB0 pré-entraîné
   base_model = EfficientNetB0(weights='imagenet', include_top=False, input_shape=input_shape)

  # Ajout de nouvelles couches de classification
   x = base_model.output
   x = GlobalAveragePooling2D()(x)
   x = Dense(1024, activation='relu')(x)
   predictions = Dense(num_classes, activation='softmax')(x)
   model = Model(inputs=base_model.input, outputs=predictions)
   return model

# Load models
chemin_densNET = '/content/drive/MyDrive/Colab Notebooks/stage 1a/model_weights_DensNet121_filtre.h5'
chemin_eff1_2 = '/content/drive/MyDrive/Colab Notebooks/stage 1a/model_weights_effcientNET_1_2.h5'
chemin_eff3_4 = '/content/drive/MyDrive/Colab Notebooks/stage 1a/model_weights_effcientNET_3_4.h5'
model_dense = load_dense_model(chemin_densNET)
model_eff1_2 = load_eff_model(chemin_eff1_2)
model_eff3_4 = load_eff_model(chemin_eff3_4)

# Define the Flask routes
@app.route("/")
def serve_webpage():
    return render_template("webapp2.html")

@app.route("/predict", methods=["POST"])
def predict_from_upload():
    try:
        file = request.files["file"]
        contents = file.read()
        image = Image.open(io.BytesIO(contents))

        input_image = image.resize((224, 224))
        input_image = np.array(input_image)
        input_image = preprocess_input(input_image)

        # Perform predictions using DenseNet model
        dense_predictions = model_dense.predict(np.array([input_image]))
        predicted_class_index_dense = np.argmax(dense_predictions)

        if predicted_class_index_dense == 2:
            # Perform predictions using EfficientNet model
            eff_predictions = model_eff1_2.predict(np.array([input_image]))
            predicted_class_index_eff = np.argmax(eff_predictions)
            predicted_class_index = predicted_class_index_eff + 1
        elif predicted_class_index_dense == 3:
            eff_predictions = model_eff3_4.predict(np.array([input_image]))
            predicted_class_index_eff = np.argmax(eff_predictions)
            predicted_class_index = predicted_class_index_eff + 3
        else:
            predicted_class_index = predicted_class_index_dense

        return jsonify({"predicted_class_index": predicted_class_index})
    except Exception as e:
        return jsonify({"error": str(e)})

if __name__ == "__main__":
    ngrok.set_auth_token("2TPBHB9EjurcPIw242UIez1oCty_SspXVau222FRARcytccd")
    app.run()



# Load models

